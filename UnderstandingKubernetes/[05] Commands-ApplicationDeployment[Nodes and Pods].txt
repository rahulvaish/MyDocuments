Open the Terminal and Execute the below commands:

[1] kubectl get nodes
[2] kubectl describe node master.example.com
[3] kubectl run application2 --image=rahulvaish/springbootdocker --port=8080

To create a yml for app deplyoment:  
[4] vi appdeploymentfromyml.yml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: appdeploymentfromyml
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: appdeploymentfromyml
    spec:
      containers:
      - name: appdeploymentfromyml
        image: rahulvaish/springbootdocker
        ports:
        - containerPort: 8080


[5] kubectl create -f appdeploymentfromyml.yml
[6] kubectl get deployments [You will find one deployment as 'application2' and another as 'appdeploymentfromyml']
[7] kubectl get pods -o wide [To determine, in which node this deployment happened]
[8] kubectl describe deployment application2
[9] kubectl edit deployment application2 [If we want to change the replicas of pods]
[10] kubectl delete deployment application2
[11] kubectl get pods
[12] kubectl describe pod <podId>
[13] kubectl delete pod <podId> 
     For forceful deletion of pod: kubectl delete pods <podID> --grace-period=0 --force
[14] kubectl get namespaces

To create a yml for namespace creation: 
[15] vi namespace.yml

apiVersion: v1
kind: Namespace

metadata:
   name: rahulvaishnamespace
   
   
[16] kubectl create -f namespace.yml
[17] kubectl get pod --all-namespaces
[18] kubectl config set-context $(kubectl config current-context) --namespace=rahulvaishnamespace
[19] kubectl run application4 --image=rahulvaish/springbootdocker --port=8080  
[20] kubectl get pod --all-namespaces
[21] kubectl run application5 --image=rahulvaish/springbootdocker --port=8080 --n default
[22] kubectl get pod --all-namespaces
[23] cd .kube
[24] cat config

